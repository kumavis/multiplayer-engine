TODO

- [ ] sync tick
- [ ] entity ownership control validation (?)

- [x] refactor
  I got a bit lost but made progress
  C+S differentiate by what they broadcast and what they accept
  need to clear up importing actionHistory for one peer vs for many

ActionHistory is a SlidingWindow of actions
ActionFrame is all actions for the frame
ActionSet is a single clients ActionFrame

- [x] use SM on frontend
- [x] update state transition to handle new actions (join/leave)
- [x] breakout into lib and example

### etc
measure latency
add interpolate delay
interpolate
extrapolate
prediction error correction
broadcast diffs since confirmed tick

? how to synchronize tick rate / avoid drift

Server message:
  current tick
  world state

Client message:
  last heard tick
  actions for tick


current = lastTick+roundTripDelay/2


           1---2---3--
client ===============
          /   /   /
         1   2   3
        /   /   /
server =============
       1---2---3----



           1---2---3--
client ===============
            \        
             1    3
              \   /
server =============
       1---2---3----



many owners
many entities
many behaviours

hub-spoke over un/reliable streams


client -> server -> peers

client network output: small packets 20-30/s
server simulates world 33/s, transmits 20/s

client performs prediction + interpolation

advanced: lag compensation
advanced: client can specify lower update rate

client sends actions
server sends diffs since last acknowedged update
or full snapshots (e.g. on start, or long delay)


setState  LG:0 0
setAction LG:0 0-A
run       LG:0 0-A-1

